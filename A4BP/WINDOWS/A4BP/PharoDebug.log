THERE_BE_DRAGONS_HERE
MetacelloProjectSpecLoadError: No version found for '12' of ConfigurationOfNeoCSV because: Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions include: #(#bleedingEdge #stable '1-baseline' '1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11')
27 May 2015 9:32:32.326797 pm

VM: Win32 - IX86 - 6.2 - NBCoInterpreter NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
NBCogit NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
https://github.com/pharo-project/pharo-vm.git Commit: 81b5d19917dcb78f22482a780deec48c53738396 Date: 2014-09-20 14:36:18 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14858

Image: Pharo4.0 [Latest update: #40614]

[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


BlockClosure>>cull:
	Receiver: [ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException...etc...
	Arguments and temporary variables: 
		anArg: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions ...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	230
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versi...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versi...etc...
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


MetacelloVersionDoesNotExistError(Exception)>>signal
	Receiver: Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions include: #(#bleedi...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [Configur...etc...
		signalContext: 	MetacelloVersionDoesNotExistError(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		project: 	ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [Configura...etc...
		versionString: 	'12'


[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	'12'
		aBlock: 	[ ^ aBlock value ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baseline [ConfigurationOfNeoCS...etc...
	Arguments and temporary variables: 
		key: 	'12'
		aBlock: 	[ 
(MetacelloVersionDefinitionError project: self project versionString...etc...
	Receiver's instance variables: 
		tally: 	12
		array: 	an Array('9'->9 [ConfigurationOfNeoCSV] '6'->6 [ConfigurationOfNeoCSV] '...etc...


MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProjectSpec>>version
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


BlockClosure>>on:do:
	Receiver: [ vrsn := self version ]
	Arguments and temporary variables: 
		exception: 	MetacelloVersionDoesNotExistError
		handlerAction: 	[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	ve...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	219
		numArgs: 	0


MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


MetacelloProjectSpecForLoad>>performLoad
	Receiver: a MetacelloProjectSpecForLoad
	Arguments and temporary variables: 
		displayString: 	'Project: NeoCSV 12'
		spec: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString...etc...
	Receiver's instance variables: 
		projectSpec: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versio...etc...
		useDetermineVersionForLoad: 	true
		overrideProjectSpec: 	nil


MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


MetacelloProjectReferenceSpec>>loadUsing:gofer:
	Receiver: spec 
	name: 'NeoCSV';
	projectReference: [
		spec
			className: #ConfigurationOfNeoCSV;
	...etc...
	Arguments and temporary variables: 
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
		ignored: 	a MetacelloGofer
		required: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionSt...etc...
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	nil
		mutable: 	nil
		name: 	'NeoCSV'
		requires: 	#()
		includes: 	#()
		answers: 	nil
		projectReference: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	v...etc...


[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
		pkg: 	spec 
	name: 'NeoCSV';
	projectReference: [
		spec
			className: #Configur...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReference: [
		spec
			className:...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :pkg | pkg loadUsing: self gofer: gofer ]
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(spec 
	name: 'GlamourCore';
	projectReference: [
		spec
			clas...etc...
		firstIndex: 	1
		lastIndex: 	31


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


BlockClosure>>ensure:
	Receiver: [ super linearLoadPackageSpecs: packageSpecs repositories: repositories ]
	Arguments and temporary variables: 
		aBlock: 	[ loadDirective := oldRoot ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositorie...etc...
		startpc: 	33
		numArgs: 	0


MetacelloLoaderPolicy>>pushLoadDirective:during:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [C...etc...
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		oldRoot: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : Con...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary('ArbitraryPrecisionFloat-nice.51'->a MCSqueaksource...etc...
		ensuredMap: 	a Dictionary('ArbitraryPrecisionFl'->#present 'BitmapCharacterSet'-...etc...
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	nil
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [Conf...etc...
		silently: 	false


MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary('ArbitraryPrecisionFloat-nice.51'->a MCSqueaksource...etc...
		ensuredMap: 	a Dictionary('ArbitraryPrecisionFl'->#present 'BitmapCharacterSet'-...etc...
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	nil
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [Conf...etc...
		silently: 	false


MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		repos: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkhub.com/...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloMCVersionSpecLoader>>load
	Receiver: a MetacelloMCVersionSpecLoader
	Arguments and temporary variables: 
		mcLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4B...etc...
	Receiver's instance variables: 
		versionSpec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec au...etc...
		required: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' '...etc...
		packages: 	a Dictionary('A4BP-BPEL20-core'->spec 
	name: 'A4BP-BPEL20-core';
	re...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloMCVersion>>executeLoadFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		loader: 	a MetacelloMCVersionSpecLoader
		mcLoader: 	nil
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
		dict: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


BlockClosure>>on:do:
	Receiver: [ ^ aBlock value: dict ]
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
(ex isKindOf: MetacelloStackCacheNotification)
	ifTrue:...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:...etc...
		startpc: 	100
		numArgs: 	0


MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


BlockClosure>>ensure:
	Receiver: [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self versionSpec loader: originalLoader ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform curre...etc...
		startpc: 	120
		numArgs: 	0


[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	us...etc...
		aString: 	'Fetching 1.1 of ConfigurationOfA4BP'
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy



--- The full stack ---
[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MetacelloVersionDoesNotExistError(Exception)>>signal
[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
MetacelloMCProject(MetacelloProject)>>version:
MetacelloMCProjectSpec>>version
[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>on:do:
MetacelloMCProjectSpec>>loadVersion:
MetacelloProjectSpecForLoad>>performLoad
MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
MetacelloProjectReferenceSpec>>loadUsing:gofer:
[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
OrderedCollection>>do:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
BlockClosure>>ensure:
MetacelloLoaderPolicy>>pushLoadDirective:during:
MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
MetacelloMCVersionSpecLoader>>load
MetacelloMCVersion>>executeLoadFromArray:
[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
BlockClosure>>on:do:
MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
BlockClosure>>ensure:
[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
MetacelloMCVersion>>fetchRequiredFromArray:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
BlockClosure>>ensure:
MetacelloMCVersion>>doLoadRequiredFromArray:
MetacelloMCVersion>>load
MetacelloConfigurationBrowserPane>>loadConfigurationWithStable:
MetacelloConfigurationBrowserPane>>installConfiguration
MetacelloConfigurationBrowser>>installConfiguration
MetacelloConfigurationBrowserToolbar>>installConfiguration
[ self installConfiguration ] in MetacelloConfigurationBrowserToolbar>>setInstallModel
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Warning
27 May 2015 11:27:05.687797 pm

VM: Win32 - IX86 - 6.2 - NBCoInterpreter NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
NBCogit NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
https://github.com/pharo-project/pharo-vm.git Commit: 81b5d19917dcb78f22482a780deec48c53738396 Date: 2014-09-20 14:36:18 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14858

Image: Pharo4.0 [Latest update: #40614]

MCPackageLoader(Object)>>notify:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		aString: 	'This package depends on the following classes:
  GLMRoassal2Easel
You...etc...
	Receiver's instance variables: 
		requirements: 	#(#GLMRoassal2Easel)
		unloadableDefinitions: 	a SortedCollection(a MCClassDefinition(A4BPGLMRoassal2Ea...etc...
		obsoletions: 	a Dictionary(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP-View-...etc...
		additions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP...etc...
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	a Set(#VersionnerSpecBrowser #AthensPluggableTextMorph #BPBuilderSe...etc...
		methodAdditions: 	an OrderedCollection()


MCPackageLoader>>warnAboutDependencies
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		requirements: 	#(#GLMRoassal2Easel)
		unloadableDefinitions: 	a SortedCollection(a MCClassDefinition(A4BPGLMRoassal2Ea...etc...
		obsoletions: 	a Dictionary(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP-View-...etc...
		additions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP...etc...
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	a Set(#VersionnerSpecBrowser #AthensPluggableTextMorph #BPBuilderSe...etc...
		methodAdditions: 	an OrderedCollection()


MCPackageLoader>>validate
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		requirements: 	#(#GLMRoassal2Easel)
		unloadableDefinitions: 	a SortedCollection(a MCClassDefinition(A4BPGLMRoassal2Ea...etc...
		obsoletions: 	a Dictionary(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP-View-...etc...
		additions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP...etc...
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	a Set(#VersionnerSpecBrowser #AthensPluggableTextMorph #BPBuilderSe...etc...
		methodAdditions: 	an OrderedCollection()


MCPackageLoader>>loadWithNameLike:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		baseName: 	'A4BP-View-AlvaroJosePeraltaOcamop.3003'
	Receiver's instance variables: 
		requirements: 	#(#GLMRoassal2Easel)
		unloadableDefinitions: 	a SortedCollection(a MCClassDefinition(A4BPGLMRoassal2Ea...etc...
		obsoletions: 	a Dictionary(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP-View-...etc...
		additions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP...etc...
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	a Set(#VersionnerSpecBrowser #AthensPluggableTextMorph #BPBuilderSe...etc...
		methodAdditions: 	an OrderedCollection()


MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'A4BP-View-AlvaroJosePeraltaOcamop.3003'
		loader: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(A4BP-View-AlvaroJosePeraltaOcamop.30...etc...


[ 
| version |
version := versions first.
self ensurePackage: version package.
self loadWithNameLike: version info name ] in MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		version: 	a MCVersion(A4BP-View-AlvaroJosePeraltaOcamop.3003)
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(A4BP-View-AlvaroJosePeraltaOcamop.30...etc...


BlockClosure>>ensure:
	Receiver: [ 
| version |
version := versions first.
self ensurePackage: version package.
self loadWi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self cacheActive: oldActive.
self isCacheActive
	ifFalse: [ self res...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MCVersionLoader>>load
		startpc: 	50
		numArgs: 	0


RPackageSet class>>withCacheDo:
	Receiver: RPackageSet
	Arguments and temporary variables: 
		aBlock: 	[ 
| version |
version := versions first.
self ensurePackage: version p...etc...
		oldActive: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asRPackageSet->RPackageSet>>#asRPackageSet #cat...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#('packageName' 'packages' 'classes' 'definedClasses' 'exten...etc...
		organization: 	a ClassOrganization
		subclasses: 	{MetacelloTestsPackageSet}
		name: 	#RPackageSet
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RPackage-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		cacheActive: 	true
		cachePackages: 	an IdentityDictionary(#'A4BP-View'->a RPackageSet )


MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(A4BP-View-AlvaroJosePeraltaOcamop.30...etc...


MetacelloGoferLoad(GoferLoad)>>execute
	Receiver: a MetacelloGoferLoad
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gofer: 	a MetacelloGofer
		model: 	a MCVersionLoader


[ 
"mcLoader preLoad: packageSpec."
goferLoad := MetacelloGoferLoad on: aGofer.
goferLoad addResolved: resolvedReference.
goferLoad execute.
MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ] in loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpec |
	packageSpec := aPackageLoadDirective spec.
	MetacelloPlatform current
		do: [ 
			| loadBlock goferLoad answers resolvedReference |
			aGofer disablePackageCache.	"for good luck:)"
			resolvedReference := self resolvePackageSpec: packageSpec gofer: aGofer.
			resolvedReference isNil
				ifTrue: [ 
					"Package version already loaded into image"
					^ self ].
			loadBlock := [ 
			"mcLoader preLoad: packageSpec."
			goferLoad := MetacelloGoferLoad on: aGofer.
			goferLoad addResolved: resolvedReference.
			goferLoad execute.
			MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ].
			(answers := packageSpec answers) notEmpty
				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]
				ifFalse: [ loadBlock value ].
			resolvedReference workingCopy repositoryGroup addRepository: aPackageLoadDirective repository.
			Transcript
				cr;
				show:
						'Loaded -> ' , resolvedReference name , ' --- ' , aPackageLoadDirective repository description , ' --- '
								, resolvedReference repository description ]
		displaying: 'Loading ' , packageSpec file in MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
	Receiver: a MetacelloLoadingMCSpecLoader
	Arguments and temporary variables: 
		aPackageLoadDirective: 	load : A4BP-View-AlvaroJosePeraltaOcamop.3003
		aGofer: 	a MetacelloGofer
		packageSpec: 	spec 
	name: #'A4BP-View';
	requires: #('A4BP-core' );
	file: 'A4B...etc...
		loadBlock: 	[ 
"mcLoader preLoad: packageSpec."
goferLoad := MetacelloGoferLoad ...etc...
		answers: 	#()
		resolvedReference: 	a MetacelloCachingGoferResolvedReference name: 'A4BP-View-Al...etc...
		goferLoad: 	a MetacelloGoferLoad
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpec |
	packageSpec := aPackageLoadDirective spec.
	MetacelloPlatform current
		do: [ 
			| loadBlock goferLoad answers resolvedReference |
			aGofer disablePackageCache.	"for good luck:)"
			resolvedReference := self resolvePackageSpec: packageSpec gofer: aGofer.
			resolvedReference isNil
				ifTrue: [ 
					"Package version already loaded into image"
					^ self ].
			loadBlock := [ 
			"mcLoader preLoad: packageSpec."
			goferLoad := MetacelloGoferLoad on: aGofer.
			goferLoad addResolved: resolvedReference.
			goferLoad execute.
			MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ].
			(answers := packageSpec answers) notEmpty
				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]
				ifFalse: [ loadBlock value ].
			resolvedReference workingCopy repositoryGroup addRepository: aPackageLoadDirective repository.
			Transcript
				cr;
				show:
						'Loaded -> ' , resolvedReference name , ' --- ' , aPackageLoadDirective repository description , ' --- '
								, resolvedReference repository description ]
		displaying: 'Loading ' , packageSpec file in MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
	Receiver: a MetacelloLoadingMCSpecLoader
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpe...etc...
		aString: 	'Loading A4BP-View-AlvaroJosePeraltaOcamop.3003'
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
	Receiver: a MetacelloLoadingMCSpecLoader
	Arguments and temporary variables: 
		aPackageLoadDirective: 	load : A4BP-View-AlvaroJosePeraltaOcamop.3003
		aGofer: 	a MetacelloGofer
		packageSpec: 	spec 
	name: #'A4BP-View';
	requires: #('A4BP-core' );
	file: 'A4B...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadPackageDirective:gofer:
	Receiver: linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [ConfigurationOfRoassal2]
		loa...etc...
	Arguments and temporary variables: 
		aPackageLoadDirective: 	load : A4BP-View-AlvaroJosePeraltaOcamop.3003
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1.1 [Co...etc...
		loadDirectives: 	an OrderedCollection(linear load : 1.9 [ConfigurationOfRoassal2...etc...


MetacelloPackageLoadDirective>>loadUsing:gofer:
	Receiver: load : A4BP-View-AlvaroJosePeraltaOcamop.3003
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [C...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	spec 
	name: #'A4BP-View';
	requires: #('A4BP-core' );
	file: 'A4BP-View-...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1.1 [Co...etc...
		resolvedReference: 	nil
		externalReference: 	a MetacelloCachingGoferResolvedReference name: 'A4BP-View-Al...etc...


[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ] in MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [C...etc...
		aGofer: 	a MetacelloGofer
		directive: 	load : A4BP-View-AlvaroJosePeraltaOcamop.3003
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(linear load : 1.9 [ConfigurationOfRoassal2]
	load : Trachel-Alexandre...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ]
		index: 	20
	Receiver's instance variables: 
		array: 	an Array(linear load : 1.9 [ConfigurationOfRoassal2]
	load : Trachel-Ale...etc...
		firstIndex: 	1
		lastIndex: 	34


MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [C...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


MetacelloLinearLoadDirective>>loadUsing:gofer:
	Receiver: linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [ConfigurationOfRoassal2]
		loa...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		l...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1.1 [Co...etc...
		loadDirectives: 	an OrderedCollection(linear load : 1.9 [ConfigurationOfRoassal2...etc...


[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ] in MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		l...etc...
		aGofer: 	a MetacelloGofer
		directive: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [Configur...etc...
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
	load : ConfigurationOfJNIP...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ]
		index: 	8
	Receiver's instance variables: 
		array: 	an Array(explicit load : 1.1 [ConfigurationOfA4BP]
	load : Configuration...etc...
		firstIndex: 	1
		lastIndex: 	8


MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		l...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


MetacelloLinearLoadDirective>>loadUsing:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		l...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadWithPolicy:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoadPolicy: 	a MetacelloLoaderPolicy
		gofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


MetacelloLoaderPolicy>>load
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		overrideRepositories: 	an Array(a MCDictionaryRepository(cache))
		repositoryMap: 	a Dictionary('A4BP-BPEL20-core-AlvaroJosePeraltaOcampo.27'->a MC...etc...
		ensuredMap: 	a Dictionary('ArbitraryPrecisionFl'->#present 'BitmapCharacterSet'-...etc...
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	nil
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load...etc...
		silently: 	false


MetacelloFetchingMCSpecLoader>>doLoad
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


[ fetchLoader doLoad ] in [ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set(#'A4BP-Tests-BPEL20-source' 'A4BP-DB' 'A4BP-BPMN20-core' 'SciSma...etc...
		displayString: 	'1.1 of ConfigurationOfA4BP'
		oldPolicy: 	nil
		oldBypassProgress: 	false
		fetchLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1....etc...
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ fetchLoader doLoad ]
		aString: 	'Loading 1.1 of ConfigurationOfA4BP'
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


[ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set(#'A4BP-Tests-BPEL20-source' 'A4BP-DB' 'A4BP-BPMN20-core' 'SciSma...etc...
		displayString: 	'1.1 of ConfigurationOfA4BP'
		oldPolicy: 	nil
		oldBypassProgress: 	false
		fetchLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1....etc...
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


BlockClosure>>ensure:
	Receiver: [ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
MetacelloPlatform current bypassProgressBars: oldBypassProgress.
loa...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MetacelloMCVersion>>doLoadRequiredFromArray:
		startpc: 	152
		numArgs: 	0


MetacelloMCVersion>>doLoadRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set(#'A4BP-Tests-BPEL20-source' 'A4BP-DB' 'A4BP-BPMN20-core' 'SciSma...etc...
		displayString: 	'1.1 of ConfigurationOfA4BP'
		oldPolicy: 	nil
		oldBypassProgress: 	false
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloMCVersion>>load
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloConfigurationBrowserPane>>loadConfigurationWithStable:
	Receiver: a MetacelloConfigurationBrowserPane
	Arguments and temporary variables: 
		loadStable: 	true
		configName: 	'ConfigurationOfA4BP'
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		focusOrder: 	an OrderedCollection(an IconListModel)
		owner: 	a MetacelloConfigurationBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Configurations' ]
		configurationList: 	an IconListModel
		configurations: 	a SortedCollection('ConfigurationOfA4BP-AlvaroJosePeraltaOcamop...etc...
		repository: 	'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo40/main'
		configurationPattern: 	nil


MetacelloConfigurationBrowserPane>>installConfiguration
	Receiver: a MetacelloConfigurationBrowserPane
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		focusOrder: 	an OrderedCollection(an IconListModel)
		owner: 	a MetacelloConfigurationBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Configurations' ]
		configurationList: 	an IconListModel
		configurations: 	a SortedCollection('ConfigurationOfA4BP-AlvaroJosePeraltaOcamop...etc...
		repository: 	'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo40/main'
		configurationPattern: 	nil


MetacelloConfigurationBrowser>>installConfiguration
	Receiver: a MetacelloConfigurationBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a SearchMorph(722206720...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ Form(16x16x32) ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Configuration browser' ]
		configBrowserModel: 	a MetacelloConfigurationBrowserPane
		toolbarModel: 	a MetacelloConfigurationBrowserToolbar
		configurationPattern: 	nil


MetacelloConfigurationBrowserToolbar>>installConfiguration
	Receiver: a MetacelloConfigurationBrowserToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel)
		owner: 	a MetacelloConfigurationBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		loadModel: 	a ButtonModel
		installModel: 	a ButtonModel


[ self installConfiguration ] in MetacelloConfigurationBrowserToolbar>>setInstallModel
	Receiver: a MetacelloConfigurationBrowserToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel)
		owner: 	a MetacelloConfigurationBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		loadModel: 	a ButtonModel
		installModel: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a MetacelloConfigurationBrowserToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ self installConfiguration ] ]
		labelHolder: 	a CollectionValueHolder[ 'Install Stable Version' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]



--- The full stack ---
MCPackageLoader(Object)>>notify:
MCPackageLoader>>warnAboutDependencies
MCPackageLoader>>validate
MCPackageLoader>>loadWithNameLike:
MCVersionLoader>>loadWithNameLike:
[ 
| version |
version := versions first.
self ensurePackage: version package.
self loadWithNameLike: version info name ] in MCVersionLoader>>load
BlockClosure>>ensure:
RPackageSet class>>withCacheDo:
MCVersionLoader>>load
MetacelloGoferLoad(GoferLoad)>>execute
[ 
"mcLoader preLoad: packageSpec."
goferLoad := MetacelloGoferLoad on: aGofer.
goferLoad addResolved: resolvedReference.
goferLoad execute.
MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ] in loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpec |
	packageSpec := aPackageLoadDirective spec.
	MetacelloPlatform current
		do: [ 
			| loadBlock goferLoad answers resolvedReference |
			aGofer disablePackageCache.	"for good luck:)"
			resolvedReference := self resolvePackageSpec: packageSpec gofer: aGofer.
			resolvedReference isNil
				ifTrue: [ 
					"Package version already loaded into image"
					^ self ].
			loadBlock := [ 
			"mcLoader preLoad: packageSpec."
			goferLoad := MetacelloGoferLoad on: aGofer.
			goferLoad addResolved: resolvedReference.
			goferLoad execute.
			MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ].
			(answers := packageSpec answers) notEmpty
				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]
				ifFalse: [ loadBlock value ].
			resolvedReference workingCopy repositoryGroup addRepository: aPackageLoadDirective repository.
			Transcript
				cr;
				show:
						'Loaded -> ' , resolvedReference name , ' --- ' , aPackageLoadDirective repository description , ' --- '
								, resolvedReference repository description ]
		displaying: 'Loading ' , packageSpec file in MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpec |
	packageSpec := aPackageLoadDirective spec.
	MetacelloPlatform current
		do: [ 
			| loadBlock goferLoad answers resolvedReference |
			aGofer disablePackageCache.	"for good luck:)"
			resolvedReference := self resolvePackageSpec: packageSpec gofer: aGofer.
			resolvedReference isNil
				ifTrue: [ 
					"Package version already loaded into image"
					^ self ].
			loadBlock := [ 
			"mcLoader preLoad: packageSpec."
			goferLoad := MetacelloGoferLoad on: aGofer.
			goferLoad addResolved: resolvedReference.
			goferLoad execute.
			MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ].
			(answers := packageSpec answers) notEmpty
				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]
				ifFalse: [ loadBlock value ].
			resolvedReference workingCopy repositoryGroup addRepository: aPackageLoadDirective repository.
			Transcript
				cr;
				show:
						'Loaded -> ' , resolvedReference name , ' --- ' , aPackageLoadDirective repository description , ' --- '
								, resolvedReference repository description ]
		displaying: 'Loading ' , packageSpec file in MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadPackageDirective:gofer:
MetacelloPackageLoadDirective>>loadUsing:gofer:
[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ] in MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
OrderedCollection>>do:
MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
MetacelloLinearLoadDirective>>loadUsing:gofer:
[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ] in MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
OrderedCollection>>do:
MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
MetacelloLinearLoadDirective>>loadUsing:gofer:
MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadWithPolicy:
MetacelloLoaderPolicy>>load
MetacelloFetchingMCSpecLoader>>doLoad
[ fetchLoader doLoad ] in [ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
[ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
BlockClosure>>ensure:
MetacelloMCVersion>>doLoadRequiredFromArray:
MetacelloMCVersion>>load
MetacelloConfigurationBrowserPane>>loadConfigurationWithStable:
MetacelloConfigurationBrowserPane>>installConfiguration
MetacelloConfigurationBrowser>>installConfiguration
MetacelloConfigurationBrowserToolbar>>installConfiguration
[ self installConfiguration ] in MetacelloConfigurationBrowserToolbar>>setInstallModel
ButtonModel>>performAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MetacelloProjectSpecLoadError: No version found for '12' of ConfigurationOfNeoCSV because: Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions include: #(#bleedingEdge #stable '1-baseline' '1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11')
28 May 2015 11:45:52.083797 am

VM: Win32 - IX86 - 6.2 - NBCoInterpreter NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
NBCogit NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
https://github.com/pharo-project/pharo-vm.git Commit: 81b5d19917dcb78f22482a780deec48c53738396 Date: 2014-09-20 14:36:18 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14858

Image: Pharo4.0 [Latest update: #40614]

[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


BlockClosure>>cull:
	Receiver: [ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException...etc...
	Arguments and temporary variables: 
		anArg: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions ...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	230
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versi...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versi...etc...
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


MetacelloVersionDoesNotExistError(Exception)>>signal
	Receiver: Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions include: #(#bleedi...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [Configur...etc...
		signalContext: 	MetacelloVersionDoesNotExistError(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		project: 	ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [Configura...etc...
		versionString: 	'12'


[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	'12'
		aBlock: 	[ ^ aBlock value ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baseline [ConfigurationOfNeoCS...etc...
	Arguments and temporary variables: 
		key: 	'12'
		aBlock: 	[ 
(MetacelloVersionDefinitionError project: self project versionString...etc...
	Receiver's instance variables: 
		tally: 	12
		array: 	an Array('9'->9 [ConfigurationOfNeoCSV] '6'->6 [ConfigurationOfNeoCSV] '...etc...


MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProjectSpec>>version
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


BlockClosure>>on:do:
	Receiver: [ vrsn := self version ]
	Arguments and temporary variables: 
		exception: 	MetacelloVersionDoesNotExistError
		handlerAction: 	[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	ve...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	219
		numArgs: 	0


MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


MetacelloProjectSpecForLoad>>performLoad
	Receiver: a MetacelloProjectSpecForLoad
	Arguments and temporary variables: 
		displayString: 	'Project: NeoCSV 12'
		spec: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString...etc...
	Receiver's instance variables: 
		projectSpec: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versio...etc...
		useDetermineVersionForLoad: 	true
		overrideProjectSpec: 	nil


MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


MetacelloProjectReferenceSpec>>loadUsing:gofer:
	Receiver: spec 
	name: 'NeoCSV';
	projectReference: [
		spec
			className: #ConfigurationOfNeoCSV;
	...etc...
	Arguments and temporary variables: 
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
		ignored: 	a MetacelloGofer
		required: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionSt...etc...
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	nil
		mutable: 	nil
		name: 	'NeoCSV'
		requires: 	#()
		includes: 	#()
		answers: 	nil
		projectReference: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	v...etc...


[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 0...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
		pkg: 	spec 
	name: 'NeoCSV';
	projectReference: [
		spec
			className: #Configur...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReference: [
		spec
			className:...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :pkg | pkg loadUsing: self gofer: gofer ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(spec 
	name: 'GlamourCore';
	projectReference: [
		spec
			clas...etc...
		firstIndex: 	1
		lastIndex: 	7


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 0...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 0...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


BlockClosure>>ensure:
	Receiver: [ super linearLoadPackageSpecs: packageSpecs repositories: repositories ]
	Arguments and temporary variables: 
		aBlock: 	[ loadDirective := oldRoot ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositorie...etc...
		startpc: 	33
		numArgs: 	0


MetacelloLoaderPolicy>>pushLoadDirective:during:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 0.24...etc...
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		oldRoot: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
	linear load...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary()
		ensuredMap: 	a Dictionary('NeoCSV'->#present 'StatPseudoCollections'->#latest )
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	a Gofer
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 0.24 [C...etc...
		silently: 	false


MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary()
		ensuredMap: 	a Dictionary('NeoCSV'->#present 'StatPseudoCollections'->#latest )
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	a Gofer
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 0.24 [C...etc...
		silently: 	false


MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 0...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 0...etc...
	Arguments and temporary variables: 
		repos: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkhub.com/...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloMCVersionSpecLoader>>load
	Receiver: a MetacelloMCVersionSpecLoader
	Arguments and temporary variables: 
		mcLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4B...etc...
	Receiver's instance variables: 
		versionSpec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec au...etc...
		required: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'GlamourCore' #'A4BP-SimEngine-Vie...etc...
		packages: 	a Dictionary('GlamourCore'->spec 
	name: 'GlamourCore';
	className: #...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloMCVersion>>executeLoadFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'GlamourCore' #'A4BP-SimEngine-View...etc...
		loader: 	a MetacelloMCVersionSpecLoader
		mcLoader: 	nil
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'GlamourCore' #'A4BP-SimEngine-View...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
		dict: 	a Dictionary(#ancestors->a Dictionary(size 428) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 428) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 428) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


BlockClosure>>on:do:
	Receiver: [ ^ aBlock value: dict ]
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
(ex isKindOf: MetacelloStackCacheNotification)
	ifTrue:...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:...etc...
		startpc: 	100
		numArgs: 	0


MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 428) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 428) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'GlamourCore' #'A4BP-SimEngine-View...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


BlockClosure>>ensure:
	Receiver: [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self versionSpec loader: originalLoader ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform curre...etc...
		startpc: 	120
		numArgs: 	0


[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'GlamourCore' #'A4BP-SimEngine-View...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	us...etc...
		aString: 	'Fetching 1.1 of ConfigurationOfA4BP'
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'GlamourCore' #'A4BP-SimEngine-View...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy



--- The full stack ---
[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MetacelloVersionDoesNotExistError(Exception)>>signal
[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
MetacelloMCProject(MetacelloProject)>>version:
MetacelloMCProjectSpec>>version
[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>on:do:
MetacelloMCProjectSpec>>loadVersion:
MetacelloProjectSpecForLoad>>performLoad
MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
MetacelloProjectReferenceSpec>>loadUsing:gofer:
[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
OrderedCollection>>do:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
BlockClosure>>ensure:
MetacelloLoaderPolicy>>pushLoadDirective:during:
MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
MetacelloMCVersionSpecLoader>>load
MetacelloMCVersion>>executeLoadFromArray:
[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
BlockClosure>>on:do:
MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
BlockClosure>>ensure:
[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
MetacelloMCVersion>>fetchRequiredFromArray:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
BlockClosure>>ensure:
MetacelloMCVersion>>doLoadRequiredFromArray:
MetacelloMCVersion>>load
MetacelloConfigurationBrowserPane>>loadConfigurationWithStable:
MetacelloConfigurationBrowserPane>>installConfiguration
MetacelloConfigurationBrowser>>installConfiguration
MetacelloConfigurationBrowserToolbar>>installConfiguration
[ self installConfiguration ] in MetacelloConfigurationBrowserToolbar>>setInstallModel
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MetacelloProjectSpecLoadError: No version found for '12' of ConfigurationOfNeoCSV because: Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions include: #(#bleedingEdge #stable '1-baseline' '1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11')
28 May 2015 3:44:29.545986 pm

VM: Win32 - IX86 - 6.2 - NBCoInterpreter NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
NBCogit NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
https://github.com/pharo-project/pharo-vm.git Commit: 81b5d19917dcb78f22482a780deec48c53738396 Date: 2014-09-20 14:36:18 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14858

Image: Pharo4.0 [Latest update: #40614]

[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


BlockClosure>>cull:
	Receiver: [ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException...etc...
	Arguments and temporary variables: 
		anArg: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions ...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	230
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versi...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versi...etc...
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


MetacelloVersionDoesNotExistError(Exception)>>signal
	Receiver: Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions include: #(#bleedi...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [Configur...etc...
		signalContext: 	MetacelloVersionDoesNotExistError(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		project: 	ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [Configura...etc...
		versionString: 	'12'


[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	'12'
		aBlock: 	[ ^ aBlock value ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baseline [ConfigurationOfNeoCS...etc...
	Arguments and temporary variables: 
		key: 	'12'
		aBlock: 	[ 
(MetacelloVersionDefinitionError project: self project versionString...etc...
	Receiver's instance variables: 
		tally: 	12
		array: 	an Array('9'->9 [ConfigurationOfNeoCSV] '6'->6 [ConfigurationOfNeoCSV] '...etc...


MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->1 [ConfigurationOfNeoCSV] '1-baseline'->1-baselin...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProjectSpec>>version
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


BlockClosure>>on:do:
	Receiver: [ vrsn := self version ]
	Arguments and temporary variables: 
		exception: 	MetacelloVersionDoesNotExistError
		handlerAction: 	[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	ve...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	219
		numArgs: 	0


MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


MetacelloProjectSpecForLoad>>performLoad
	Receiver: a MetacelloProjectSpecForLoad
	Arguments and temporary variables: 
		displayString: 	'Project: NeoCSV 12'
		spec: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString...etc...
	Receiver's instance variables: 
		projectSpec: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versio...etc...
		useDetermineVersionForLoad: 	true
		overrideProjectSpec: 	nil


MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


MetacelloProjectReferenceSpec>>loadUsing:gofer:
	Receiver: spec 
	name: 'NeoCSV';
	projectReference: [
		spec
			className: #ConfigurationOfNeoCSV;
	...etc...
	Arguments and temporary variables: 
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
		ignored: 	a MetacelloGofer
		required: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionSt...etc...
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	nil
		mutable: 	nil
		name: 	'NeoCSV'
		requires: 	#()
		includes: 	#()
		answers: 	nil
		projectReference: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	v...etc...


[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
		pkg: 	spec 
	name: 'NeoCSV';
	projectReference: [
		spec
			className: #Configur...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReference: [
		spec
			className:...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :pkg | pkg loadUsing: self gofer: gofer ]
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(spec 
	name: 'GlamourCore';
	projectReference: [
		spec
			clas...etc...
		firstIndex: 	1
		lastIndex: 	31


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


BlockClosure>>ensure:
	Receiver: [ super linearLoadPackageSpecs: packageSpecs repositories: repositories ]
	Arguments and temporary variables: 
		aBlock: 	[ loadDirective := oldRoot ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositorie...etc...
		startpc: 	33
		numArgs: 	0


MetacelloLoaderPolicy>>pushLoadDirective:during:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [C...etc...
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		oldRoot: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : Con...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary('ArbitraryPrecisionFloat-nice.51'->a MCSqueaksource...etc...
		ensuredMap: 	a Dictionary('ArbitraryPrecisionFl'->#present 'BitmapCharacterSet'-...etc...
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	nil
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [Conf...etc...
		silently: 	false


MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary('ArbitraryPrecisionFloat-nice.51'->a MCSqueaksource...etc...
		ensuredMap: 	a Dictionary('ArbitraryPrecisionFl'->#present 'BitmapCharacterSet'-...etc...
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	nil
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [Conf...etc...
		silently: 	false


MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'GlamourCore';
	projectReferenc...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9...etc...
	Arguments and temporary variables: 
		repos: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkhub.com/...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloMCVersionSpecLoader>>load
	Receiver: a MetacelloMCVersionSpecLoader
	Arguments and temporary variables: 
		mcLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4B...etc...
	Receiver's instance variables: 
		versionSpec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec au...etc...
		required: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' '...etc...
		packages: 	a Dictionary('A4BP-BPEL20-core'->spec 
	name: 'A4BP-BPEL20-core';
	re...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloMCVersion>>executeLoadFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		loader: 	a MetacelloMCVersionSpecLoader
		mcLoader: 	nil
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
		dict: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


BlockClosure>>on:do:
	Receiver: [ ^ aBlock value: dict ]
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
(ex isKindOf: MetacelloStackCacheNotification)
	ifTrue:...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:...etc...
		startpc: 	100
		numArgs: 	0


MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 644) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


BlockClosure>>ensure:
	Receiver: [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self versionSpec loader: originalLoader ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform curre...etc...
		startpc: 	120
		numArgs: 	0


[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	us...etc...
		aString: 	'Fetching 1.1 of ConfigurationOfA4BP'
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: 1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('A4BP-XSD-core' 'A4BP-Spy' #'A4BP-BPMN20-view' 'SciSmalltalk' 'A...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#noStatus
		loaderPolicy: 	a MetacelloLoaderPolicy



--- The full stack ---
[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MetacelloVersionDoesNotExistError(Exception)>>signal
[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
MetacelloMCProject(MetacelloProject)>>version:
MetacelloMCProjectSpec>>version
[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>on:do:
MetacelloMCProjectSpec>>loadVersion:
MetacelloProjectSpecForLoad>>performLoad
MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
MetacelloProjectReferenceSpec>>loadUsing:gofer:
[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
OrderedCollection>>do:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
BlockClosure>>ensure:
MetacelloLoaderPolicy>>pushLoadDirective:during:
MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
MetacelloMCVersionSpecLoader>>load
MetacelloMCVersion>>executeLoadFromArray:
[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
BlockClosure>>on:do:
MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
BlockClosure>>ensure:
[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
MetacelloMCVersion>>fetchRequiredFromArray:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
BlockClosure>>ensure:
MetacelloMCVersion>>doLoadRequiredFromArray:
MetacelloMCVersion>>load
MetacelloConfigurationBrowserPane>>loadConfigurationWithStable:
MetacelloConfigurationBrowserPane>>installConfiguration
MetacelloConfigurationBrowser>>installConfiguration
MetacelloConfigurationBrowserToolbar>>installConfiguration
[ self installConfiguration ] in MetacelloConfigurationBrowserToolbar>>setInstallModel
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Warning
28 May 2015 7:51:23.107494 pm

VM: Win32 - IX86 - 6.2 - NBCoInterpreter NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
NBCogit NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
https://github.com/pharo-project/pharo-vm.git Commit: 81b5d19917dcb78f22482a780deec48c53738396 Date: 2014-09-20 14:36:18 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14858

Image: Pharo4.0 [Latest update: #40614]

MCPackageLoader(Object)>>notify:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		aString: 	'This package depends on the following classes:
  GLMRoassal2Easel
You...etc...
	Receiver's instance variables: 
		requirements: 	#(#GLMRoassal2Easel)
		unloadableDefinitions: 	a SortedCollection(a MCClassDefinition(A4BPGLMRoassal2Ea...etc...
		obsoletions: 	a Dictionary(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP-View-...etc...
		additions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP...etc...
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	a Set(#VersionnerSpecBrowser #AthensPluggableTextMorph #GoferMetace...etc...
		methodAdditions: 	an OrderedCollection()


MCPackageLoader>>warnAboutDependencies
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		requirements: 	#(#GLMRoassal2Easel)
		unloadableDefinitions: 	a SortedCollection(a MCClassDefinition(A4BPGLMRoassal2Ea...etc...
		obsoletions: 	a Dictionary(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP-View-...etc...
		additions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP...etc...
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	a Set(#VersionnerSpecBrowser #AthensPluggableTextMorph #GoferMetace...etc...
		methodAdditions: 	an OrderedCollection()


MCPackageLoader>>validate
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		requirements: 	#(#GLMRoassal2Easel)
		unloadableDefinitions: 	a SortedCollection(a MCClassDefinition(A4BPGLMRoassal2Ea...etc...
		obsoletions: 	a Dictionary(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP-View-...etc...
		additions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP...etc...
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	a Set(#VersionnerSpecBrowser #AthensPluggableTextMorph #GoferMetace...etc...
		methodAdditions: 	an OrderedCollection()


MCPackageLoader>>loadWithNameLike:
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		baseName: 	'A4BP-View-AlvaroJosePeraltaOcamop.3003'
	Receiver's instance variables: 
		requirements: 	#(#GLMRoassal2Easel)
		unloadableDefinitions: 	a SortedCollection(a MCClassDefinition(A4BPGLMRoassal2Ea...etc...
		obsoletions: 	a Dictionary(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP-View-...etc...
		additions: 	an OrderedCollection(a MCOrganizationDefinition(#(#'A4BP-View' 'A4BP...etc...
		removals: 	an OrderedCollection()
		errorDefinitions: 	nil
		provisions: 	a Set(#VersionnerSpecBrowser #AthensPluggableTextMorph #GoferMetace...etc...
		methodAdditions: 	an OrderedCollection()


MCVersionLoader>>loadWithNameLike:
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		aString: 	'A4BP-View-AlvaroJosePeraltaOcamop.3003'
		loader: 	a MCPackageLoader
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(A4BP-View-AlvaroJosePeraltaOcamop.30...etc...


[ 
| version |
version := versions first.
self ensurePackage: version package.
self loadWithNameLike: version info name ] in MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 
		version: 	a MCVersion(A4BP-View-AlvaroJosePeraltaOcamop.3003)
	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(A4BP-View-AlvaroJosePeraltaOcamop.30...etc...


BlockClosure>>ensure:
	Receiver: [ 
| version |
version := versions first.
self ensurePackage: version package.
self loadWi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
self cacheActive: oldActive.
self isCacheActive
	ifFalse: [ self res...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MCVersionLoader>>load
		startpc: 	50
		numArgs: 	0


RPackageSet class>>withCacheDo:
	Receiver: RPackageSet
	Arguments and temporary variables: 
		aBlock: 	[ 
| version |
version := versions first.
self ensurePackage: version p...etc...
		oldActive: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asRPackageSet->RPackageSet>>#asRPackageSet #cat...etc...
		format: 	150
		layout: 	a FixedLayout
		instanceVariables: 	#('packageName' 'packages' 'classes' 'definedClasses' 'exten...etc...
		organization: 	a ClassOrganization
		subclasses: 	{MetacelloTestsPackageSet}
		name: 	#RPackageSet
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RPackage-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		cacheActive: 	true
		cachePackages: 	an IdentityDictionary(#'A4BP-View'->a RPackageSet )


MCVersionLoader>>load
	Receiver: a MCVersionLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		versions: 	an OrderedCollection(a MCVersion(A4BP-View-AlvaroJosePeraltaOcamop.30...etc...


MetacelloGoferLoad(GoferLoad)>>execute
	Receiver: a MetacelloGoferLoad
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gofer: 	a MetacelloGofer
		model: 	a MCVersionLoader


[ 
"mcLoader preLoad: packageSpec."
goferLoad := MetacelloGoferLoad on: aGofer.
goferLoad addResolved: resolvedReference.
goferLoad execute.
MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ] in loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpec |
	packageSpec := aPackageLoadDirective spec.
	MetacelloPlatform current
		do: [ 
			| loadBlock goferLoad answers resolvedReference |
			aGofer disablePackageCache.	"for good luck:)"
			resolvedReference := self resolvePackageSpec: packageSpec gofer: aGofer.
			resolvedReference isNil
				ifTrue: [ 
					"Package version already loaded into image"
					^ self ].
			loadBlock := [ 
			"mcLoader preLoad: packageSpec."
			goferLoad := MetacelloGoferLoad on: aGofer.
			goferLoad addResolved: resolvedReference.
			goferLoad execute.
			MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ].
			(answers := packageSpec answers) notEmpty
				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]
				ifFalse: [ loadBlock value ].
			resolvedReference workingCopy repositoryGroup addRepository: aPackageLoadDirective repository.
			Transcript
				cr;
				show:
						'Loaded -> ' , resolvedReference name , ' --- ' , aPackageLoadDirective repository description , ' --- '
								, resolvedReference repository description ]
		displaying: 'Loading ' , packageSpec file in MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
	Receiver: a MetacelloLoadingMCSpecLoader
	Arguments and temporary variables: 
		aPackageLoadDirective: 	load : A4BP-View-AlvaroJosePeraltaOcamop.3003
		aGofer: 	a MetacelloGofer
		packageSpec: 	spec 
	name: #'A4BP-View';
	requires: #('A4BP-core' );
	file: 'A4B...etc...
		loadBlock: 	[ 
"mcLoader preLoad: packageSpec."
goferLoad := MetacelloGoferLoad ...etc...
		answers: 	#()
		resolvedReference: 	a MetacelloCachingGoferResolvedReference name: 'A4BP-View-Al...etc...
		goferLoad: 	a MetacelloGoferLoad
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpec |
	packageSpec := aPackageLoadDirective spec.
	MetacelloPlatform current
		do: [ 
			| loadBlock goferLoad answers resolvedReference |
			aGofer disablePackageCache.	"for good luck:)"
			resolvedReference := self resolvePackageSpec: packageSpec gofer: aGofer.
			resolvedReference isNil
				ifTrue: [ 
					"Package version already loaded into image"
					^ self ].
			loadBlock := [ 
			"mcLoader preLoad: packageSpec."
			goferLoad := MetacelloGoferLoad on: aGofer.
			goferLoad addResolved: resolvedReference.
			goferLoad execute.
			MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ].
			(answers := packageSpec answers) notEmpty
				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]
				ifFalse: [ loadBlock value ].
			resolvedReference workingCopy repositoryGroup addRepository: aPackageLoadDirective repository.
			Transcript
				cr;
				show:
						'Loaded -> ' , resolvedReference name , ' --- ' , aPackageLoadDirective repository description , ' --- '
								, resolvedReference repository description ]
		displaying: 'Loading ' , packageSpec file in MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
	Receiver: a MetacelloLoadingMCSpecLoader
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpe...etc...
		aString: 	'Loading A4BP-View-AlvaroJosePeraltaOcamop.3003'
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
	Receiver: a MetacelloLoadingMCSpecLoader
	Arguments and temporary variables: 
		aPackageLoadDirective: 	load : A4BP-View-AlvaroJosePeraltaOcamop.3003
		aGofer: 	a MetacelloGofer
		packageSpec: 	spec 
	name: #'A4BP-View';
	requires: #('A4BP-core' );
	file: 'A4B...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadPackageDirective:gofer:
	Receiver: linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [ConfigurationOfRoassal2]
		loa...etc...
	Arguments and temporary variables: 
		aPackageLoadDirective: 	load : A4BP-View-AlvaroJosePeraltaOcamop.3003
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1.1 [Co...etc...
		loadDirectives: 	an OrderedCollection(linear load : 1.9 [ConfigurationOfRoassal2...etc...


MetacelloPackageLoadDirective>>loadUsing:gofer:
	Receiver: load : A4BP-View-AlvaroJosePeraltaOcamop.3003
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [C...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	spec 
	name: #'A4BP-View';
	requires: #('A4BP-core' );
	file: 'A4BP-View-...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1.1 [Co...etc...
		resolvedReference: 	nil
		externalReference: 	a MetacelloCachingGoferResolvedReference name: 'A4BP-View-Al...etc...


[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ] in MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [C...etc...
		aGofer: 	a MetacelloGofer
		directive: 	load : A4BP-View-AlvaroJosePeraltaOcamop.3003
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(linear load : 1.9 [ConfigurationOfRoassal2]
	load : Trachel-Alexandre...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ]
		index: 	20
	Receiver's instance variables: 
		array: 	an Array(linear load : 1.9 [ConfigurationOfRoassal2]
	load : Trachel-Ale...etc...
		firstIndex: 	1
		lastIndex: 	34


MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [C...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


MetacelloLinearLoadDirective>>loadUsing:gofer:
	Receiver: linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [ConfigurationOfRoassal2]
		loa...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		l...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1.1 [Co...etc...
		loadDirectives: 	an OrderedCollection(linear load : 1.9 [ConfigurationOfRoassal2...etc...


[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ] in MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		l...etc...
		aGofer: 	a MetacelloGofer
		directive: 	linear load : 1.1 [ConfigurationOfA4BP]
	linear load : 1.9 [Configur...etc...
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
	load : ConfigurationOfJNIP...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ]
		index: 	8
	Receiver's instance variables: 
		array: 	an Array(explicit load : 1.1 [ConfigurationOfA4BP]
	load : Configuration...etc...
		firstIndex: 	1
		lastIndex: 	8


MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		l...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


MetacelloLinearLoadDirective>>loadUsing:gofer:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		l...etc...
		aGofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadWithPolicy:
	Receiver: linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load : ConfigurationOfJNIPort-...etc...
	Arguments and temporary variables: 
		aLoadPolicy: 	a MetacelloLoaderPolicy
		gofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	nil
		loader: 	nil
		loadDirectives: 	an OrderedCollection(explicit load : 1.1 [ConfigurationOfA4BP]
...etc...


MetacelloLoaderPolicy>>load
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		overrideRepositories: 	an Array(a MCDictionaryRepository(cache))
		repositoryMap: 	a Dictionary(size 101)
		ensuredMap: 	a Dictionary('ArbitraryPrecisionFl'->#present 'BitmapCharacterSet'-...etc...
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	nil
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
		load...etc...
		silently: 	false


MetacelloFetchingMCSpecLoader>>doLoad
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


[ fetchLoader doLoad ] in [ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set(#'A4BP-Tests-BPEL20-source' 'A4BP-DB' 'A4BP-BPMN20-core' 'SciSma...etc...
		displayString: 	'1.1 of ConfigurationOfA4BP'
		oldPolicy: 	nil
		oldBypassProgress: 	false
		fetchLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1....etc...
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ fetchLoader doLoad ]
		aString: 	'Loading 1.1 of ConfigurationOfA4BP'
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


[ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set(#'A4BP-Tests-BPEL20-source' 'A4BP-DB' 'A4BP-BPMN20-core' 'SciSma...etc...
		displayString: 	'1.1 of ConfigurationOfA4BP'
		oldPolicy: 	nil
		oldBypassProgress: 	false
		fetchLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 
	explicit load : 1....etc...
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


BlockClosure>>ensure:
	Receiver: [ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
MetacelloPlatform current bypassProgressBars: oldBypassProgress.
loa...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MetacelloMCVersion>>doLoadRequiredFromArray:
		startpc: 	152
		numArgs: 	0


MetacelloMCVersion>>doLoadRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set(#'A4BP-Tests-BPEL20-source' 'A4BP-DB' 'A4BP-BPMN20-core' 'SciSma...etc...
		displayString: 	'1.1 of ConfigurationOfA4BP'
		oldPolicy: 	nil
		oldBypassProgress: 	false
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloMCVersion>>load
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.6-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloConfigurationBrowserPane>>loadConfigurationWithStable:
	Receiver: a MetacelloConfigurationBrowserPane
	Arguments and temporary variables: 
		loadStable: 	true
		configName: 	'ConfigurationOfA4BP'
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		focusOrder: 	an OrderedCollection(an IconListModel)
		owner: 	a MetacelloConfigurationBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Configurations' ]
		configurationList: 	an IconListModel
		configurations: 	a SortedCollection('ConfigurationOfA4BP-AlvaroJosePeraltaOcamop...etc...
		repository: 	'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo40/main'
		configurationPattern: 	nil


MetacelloConfigurationBrowserPane>>installConfiguration
	Receiver: a MetacelloConfigurationBrowserPane
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		focusOrder: 	an OrderedCollection(an IconListModel)
		owner: 	a MetacelloConfigurationBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Configurations' ]
		configurationList: 	an IconListModel
		configurations: 	a SortedCollection('ConfigurationOfA4BP-AlvaroJosePeraltaOcamop...etc...
		repository: 	'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo40/main'
		configurationPattern: 	nil


MetacelloConfigurationBrowser>>installConfiguration
	Receiver: a MetacelloConfigurationBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a SearchMorph(131596288...etc...
		focusOrder: 	an OrderedCollection()
		owner: 	nil
		window: 	a NewValueHolder[ a WindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ Form(16x16x32) ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Configuration browser' ]
		configBrowserModel: 	a MetacelloConfigurationBrowserPane
		toolbarModel: 	a MetacelloConfigurationBrowserToolbar
		configurationPattern: 	nil


MetacelloConfigurationBrowserToolbar>>installConfiguration
	Receiver: a MetacelloConfigurationBrowserToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel)
		owner: 	a MetacelloConfigurationBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		loadModel: 	a ButtonModel
		installModel: 	a ButtonModel


[ self installConfiguration ] in MetacelloConfigurationBrowserToolbar>>setInstallModel
	Receiver: a MetacelloConfigurationBrowserToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel)
		owner: 	a MetacelloConfigurationBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		loadModel: 	a ButtonModel
		installModel: 	a ButtonModel


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	a MetacelloConfigurationBrowserToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ self installConfiguration ] ]
		labelHolder: 	a CollectionValueHolder[ 'Install Stable Version' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]



--- The full stack ---
MCPackageLoader(Object)>>notify:
MCPackageLoader>>warnAboutDependencies
MCPackageLoader>>validate
MCPackageLoader>>loadWithNameLike:
MCVersionLoader>>loadWithNameLike:
[ 
| version |
version := versions first.
self ensurePackage: version package.
self loadWithNameLike: version info name ] in MCVersionLoader>>load
BlockClosure>>ensure:
RPackageSet class>>withCacheDo:
MCVersionLoader>>load
MetacelloGoferLoad(GoferLoad)>>execute
[ 
"mcLoader preLoad: packageSpec."
goferLoad := MetacelloGoferLoad on: aGofer.
goferLoad addResolved: resolvedReference.
goferLoad execute.
MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ] in loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpec |
	packageSpec := aPackageLoadDirective spec.
	MetacelloPlatform current
		do: [ 
			| loadBlock goferLoad answers resolvedReference |
			aGofer disablePackageCache.	"for good luck:)"
			resolvedReference := self resolvePackageSpec: packageSpec gofer: aGofer.
			resolvedReference isNil
				ifTrue: [ 
					"Package version already loaded into image"
					^ self ].
			loadBlock := [ 
			"mcLoader preLoad: packageSpec."
			goferLoad := MetacelloGoferLoad on: aGofer.
			goferLoad addResolved: resolvedReference.
			goferLoad execute.
			MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ].
			(answers := packageSpec answers) notEmpty
				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]
				ifFalse: [ loadBlock value ].
			resolvedReference workingCopy repositoryGroup addRepository: aPackageLoadDirective repository.
			Transcript
				cr;
				show:
						'Loaded -> ' , resolvedReference name , ' --- ' , aPackageLoadDirective repository description , ' --- '
								, resolvedReference repository description ]
		displaying: 'Loading ' , packageSpec file in MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
loadPackageDirective: aPackageLoadDirective gofer: aGofer
	| packageSpec |
	packageSpec := aPackageLoadDirective spec.
	MetacelloPlatform current
		do: [ 
			| loadBlock goferLoad answers resolvedReference |
			aGofer disablePackageCache.	"for good luck:)"
			resolvedReference := self resolvePackageSpec: packageSpec gofer: aGofer.
			resolvedReference isNil
				ifTrue: [ 
					"Package version already loaded into image"
					^ self ].
			loadBlock := [ 
			"mcLoader preLoad: packageSpec."
			goferLoad := MetacelloGoferLoad on: aGofer.
			goferLoad addResolved: resolvedReference.
			goferLoad execute.
			MetacelloPlatform current clearCurrentVersionCache	"mcLoader postLoad: packageSpec" ].
			(answers := packageSpec answers) notEmpty
				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]
				ifFalse: [ loadBlock value ].
			resolvedReference workingCopy repositoryGroup addRepository: aPackageLoadDirective repository.
			Transcript
				cr;
				show:
						'Loaded -> ' , resolvedReference name , ' --- ' , aPackageLoadDirective repository description , ' --- '
								, resolvedReference repository description ]
		displaying: 'Loading ' , packageSpec file in MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
MetacelloLoadingMCSpecLoader(MetacelloCommonMCSpecLoader)>>loadPackageDirective:gofer:
MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadPackageDirective:gofer:
MetacelloPackageLoadDirective>>loadUsing:gofer:
[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ] in MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
OrderedCollection>>do:
MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
MetacelloLinearLoadDirective>>loadUsing:gofer:
[ :directive | directive loadUsing: aLoaderDirective gofer: aGofer ] in MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
OrderedCollection>>do:
MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadLinearLoadDirective:gofer:
MetacelloLinearLoadDirective>>loadUsing:gofer:
MetacelloLinearLoadDirective(MetacelloVersionLoadDirective)>>loadWithPolicy:
MetacelloLoaderPolicy>>load
MetacelloFetchingMCSpecLoader>>doLoad
[ fetchLoader doLoad ] in [ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
[ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
BlockClosure>>ensure:
MetacelloMCVersion>>doLoadRequiredFromArray:
MetacelloMCVersion>>load
MetacelloConfigurationBrowserPane>>loadConfigurationWithStable:
MetacelloConfigurationBrowserPane>>installConfiguration
MetacelloConfigurationBrowser>>installConfiguration
MetacelloConfigurationBrowserToolbar>>installConfiguration
[ self installConfiguration ] in MetacelloConfigurationBrowserToolbar>>setInstallModel
ButtonModel>>performAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MetacelloProjectSpecLoadError: No version found for '3.0.8' of ConfigurationOfGlamour because: Version '3.0.8' is not defined in ConfigurationOfGlamour. Possible versions include: #(#bleedingEdge #development #stable '2.0-beta.1-baseline' '2.0-beta.1' '2.0-beta.2-baseline' '2.0-beta.2' '2.0-beta.3-baseline' '2.0-beta.3' '2.0-beta.4-baseline' '2.0-beta.4' '2.0-beta.5-baseline' '2.0-beta.5' '2.0-beta.6-baseline' '2.0-beta.6' '2.0-beta.7' '2.0-beta.8' '2.0.6' '2.1-baseline' '2.1' '2.2-baseline' '2.2' '2.3-baseline' '2.3' '2.4-baseline' '2.4' '2.5-baseline' '2.5-snapshot' '2.6-baseline' '2.6-snapshot' '2.7-baseline' '2.7' '2.8-baseline' '2.9-baseline' '2.71' '2.72' '2.73' '2.74' '2.75' '2.76' '2.77' '2.91-baseline' '2.92-baseline' '2.93-baseline' '2.94-baseline' '2.95-baseline' '3.0-baseline' '3.0.0' '3.0.1' '3.0.2' '3.0.3' '3.0.4' '3.0.5' '3.0.6' '3.0.7' '3.1-baseline' '3.2-baseline' '3.3-baseline' '3.3.0')
28 May 2015 8:05:53.945494 pm

VM: Win32 - IX86 - 6.2 - NBCoInterpreter NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
NBCogit NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
https://github.com/pharo-project/pharo-vm.git Commit: 81b5d19917dcb78f22482a780deec48c53738396 Date: 2014-09-20 14:36:18 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14858

Image: Pharo4.0 [Latest update: #40614]

[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'Glamour';
	className: #ConfigurationOfGlamour;
	versionString: '3.0.8';
	rep...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'Glamour'
		className: 	#ConfigurationOfGlamour
		versionString: 	'3.0.8'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfGlamour;
	repository: 'http://smal...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Moose/Glamour/main/'...etc...
		file: 	nil


BlockClosure>>cull:
	Receiver: [ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException...etc...
	Arguments and temporary variables: 
		anArg: 	Version '3.0.8' is not defined in ConfigurationOfGlamour. Possible versi...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	230
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '3.0.8' is not defined in ConfigurationOfGlamour. Possible v...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '3.0.8' is not defined in ConfigurationOfGlamour. Possible v...etc...
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


MetacelloVersionDoesNotExistError(Exception)>>signal
	Receiver: Version '3.0.8' is not defined in ConfigurationOfGlamour. Possible versions include: #(#bl...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	ConfigurationOfGlamour(2.0-beta.1-baseline [ConfigurationOfGlamour], ...etc...
		signalContext: 	MetacelloVersionDoesNotExistError(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		project: 	ConfigurationOfGlamour(2.0-beta.1-baseline [ConfigurationOfGlamour], 2...etc...
		versionString: 	'3.0.8'


[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfGlamour(2.0-beta.1-baseline [ConfigurationOfGlamour], 2.0-beta.1 [Configura...etc...
	Arguments and temporary variables: 
		aVersionString: 	'3.0.8'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('2.0-beta.1'->>=2.0-beta.1 [ConfigurationOfGlamour] '2...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'3.2-baseline' #development->'3...etc...
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	nil
		configuration: 	a ConfigurationOfGlamour
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfGlamour(2.0-beta.1-baseline [ConfigurationOfGlamour], 2.0-beta.1 [Configura...etc...
	Arguments and temporary variables: 
		aVersionString: 	'3.0.8'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('2.0-beta.1'->>=2.0-beta.1 [ConfigurationOfGlamour] '2...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'3.2-baseline' #development->'3...etc...
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	nil
		configuration: 	a ConfigurationOfGlamour
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	'3.0.8'
		aBlock: 	[ ^ aBlock value ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfGlamour(2.0-beta.1-baseline [ConfigurationOfGlamour], 2.0-beta.1 [Configura...etc...
	Arguments and temporary variables: 
		aVersionString: 	'3.0.8'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('2.0-beta.1'->>=2.0-beta.1 [ConfigurationOfGlamour] '2...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'3.2-baseline' #development->'3...etc...
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	nil
		configuration: 	a ConfigurationOfGlamour
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('2.0-beta.1'->>=2.0-beta.1 [ConfigurationOfGlamour] '2.0-beta.1-baseline'-><>...etc...
	Arguments and temporary variables: 
		key: 	'3.0.8'
		aBlock: 	[ 
(MetacelloVersionDefinitionError project: self project versionString...etc...
	Receiver's instance variables: 
		tally: 	56
		array: 	an Array('2.91-baseline'-><>2.91-baseline [ConfigurationOfGlamour] '2.0-...etc...


MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfGlamour(2.0-beta.1-baseline [ConfigurationOfGlamour], 2.0-beta.1 [Configura...etc...
	Arguments and temporary variables: 
		aVersionString: 	'3.0.8'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('2.0-beta.1'->>=2.0-beta.1 [ConfigurationOfGlamour] '2...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'3.2-baseline' #development->'3...etc...
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	nil
		configuration: 	a ConfigurationOfGlamour
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfGlamour(2.0-beta.1-baseline [ConfigurationOfGlamour], 2.0-beta.1 [Configura...etc...
	Arguments and temporary variables: 
		aVersionString: 	'3.0.8'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('2.0-beta.1'->>=2.0-beta.1 [ConfigurationOfGlamour] '2...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'3.2-baseline' #development->'3...etc...
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	nil
		configuration: 	a ConfigurationOfGlamour
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProjectSpec>>version
	Receiver: spec 
	name: 'Glamour';
	className: #ConfigurationOfGlamour;
	versionString: '3.0.8';
	rep...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'Glamour'
		className: 	#ConfigurationOfGlamour
		versionString: 	'3.0.8'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfGlamour;
	repository: 'http://smal...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Moose/Glamour/main/'...etc...
		file: 	nil


[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'Glamour';
	className: #ConfigurationOfGlamour;
	versionString: '3.0.8';
	rep...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'Glamour'
		className: 	#ConfigurationOfGlamour
		versionString: 	'3.0.8'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfGlamour;
	repository: 'http://smal...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Moose/Glamour/main/'...etc...
		file: 	nil


BlockClosure>>on:do:
	Receiver: [ vrsn := self version ]
	Arguments and temporary variables: 
		exception: 	MetacelloVersionDoesNotExistError
		handlerAction: 	[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	ve...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	219
		numArgs: 	0


MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'Glamour';
	className: #ConfigurationOfGlamour;
	versionString: '3.0.8';
	rep...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'Glamour'
		className: 	#ConfigurationOfGlamour
		versionString: 	'3.0.8'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfGlamour;
	repository: 'http://smal...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Moose/Glamour/main/'...etc...
		file: 	nil


MetacelloProjectSpecForLoad>>performLoad
	Receiver: a MetacelloProjectSpecForLoad
	Arguments and temporary variables: 
		displayString: 	'Project: Glamour 3.0.8'
		spec: 	spec 
	name: 'Glamour';
	className: #ConfigurationOfGlamour;
	versionStri...etc...
	Receiver's instance variables: 
		projectSpec: 	spec 
	name: 'Glamour';
	className: #ConfigurationOfGlamour;
	vers...etc...
		useDetermineVersionForLoad: 	true
		overrideProjectSpec: 	nil


MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
	Receiver: spec 
	name: 'Glamour';
	className: #ConfigurationOfGlamour;
	versionString: '3.0.8';
	rep...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'Glamour'
		className: 	#ConfigurationOfGlamour
		versionString: 	'3.0.8'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfGlamour;
	repository: 'http://smal...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Moose/Glamour/main/'...etc...
		file: 	nil


MetacelloProjectReferenceSpec>>loadUsing:gofer:
	Receiver: spec 
	name: 'Glamour';
	projectReference: [
		spec
			className: #ConfigurationOfGlamour;...etc...
	Arguments and temporary variables: 
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
		ignored: 	a MetacelloGofer
		required: 	spec 
	name: 'Glamour';
	className: #ConfigurationOfGlamour;
	version...etc...
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	nil
		mutable: 	nil
		name: 	'Glamour'
		requires: 	#()
		includes: 	#()
		answers: 	nil
		projectReference: 	spec 
	name: 'Glamour';
	className: #ConfigurationOfGlamour;
...etc...


[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : G...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
		pkg: 	spec 
	name: 'Glamour';
	projectReference: [
		spec
			className: #Configu...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [
		spec
			className: #Co...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :pkg | pkg loadUsing: self gofer: gofer ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(spec 
	name: 'Glamour';
	projectReference: [
		spec
			classNam...etc...
		firstIndex: 	1
		lastIndex: 	8


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : G...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : G...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


BlockClosure>>ensure:
	Receiver: [ super linearLoadPackageSpecs: packageSpecs repositories: repositories ]
	Arguments and temporary variables: 
		aBlock: 	[ loadDirective := oldRoot ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositorie...etc...
		startpc: 	33
		numArgs: 	0


MetacelloLoaderPolicy>>pushLoadDirective:during:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : Glam...etc...
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		oldRoot: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
	explicit lo...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary('ConfigurationOfGlamour-usmanbhatti.213'->a MCSmall...etc...
		ensuredMap: 	a Dictionary('Glamour'->#present 'NeoCSV'->#present )
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	nil
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : Glamour...etc...
		silently: 	false


MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary('ConfigurationOfGlamour-usmanbhatti.213'->a MCSmall...etc...
		ensuredMap: 	a Dictionary('Glamour'->#present 'NeoCSV'->#present )
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	nil
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : Glamour...etc...
		silently: 	false


MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : G...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : G...etc...
	Arguments and temporary variables: 
		repos: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkhub.com/...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloMCVersionSpecLoader>>load
	Receiver: a MetacelloMCVersionSpecLoader
	Arguments and temporary variables: 
		mcLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4B...etc...
	Receiver's instance variables: 
		versionSpec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec au...etc...
		required: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #...etc...
		packages: 	a Dictionary('A4BP-Tests-BpelAnalyzer'->spec 
	name: 'A4BP-Tests-Bpel...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloMCVersion>>executeLoadFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		loader: 	a MetacelloMCVersionSpecLoader
		mcLoader: 	nil
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
		dict: 	a Dictionary(#ancestors->a Dictionary(size 299) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 299) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 299) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


BlockClosure>>on:do:
	Receiver: [ ^ aBlock value: dict ]
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
(ex isKindOf: MetacelloStackCacheNotification)
	ifTrue:...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:...etc...
		startpc: 	100
		numArgs: 	0


MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 299) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 299) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


BlockClosure>>ensure:
	Receiver: [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self versionSpec loader: originalLoader ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform curre...etc...
		startpc: 	120
		numArgs: 	0


[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	us...etc...
		aString: 	'Fetching 1.1 of ConfigurationOfA4BP'
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy



--- The full stack ---
[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MetacelloVersionDoesNotExistError(Exception)>>signal
[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
MetacelloMCProject(MetacelloProject)>>version:
MetacelloMCProjectSpec>>version
[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>on:do:
MetacelloMCProjectSpec>>loadVersion:
MetacelloProjectSpecForLoad>>performLoad
MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
MetacelloProjectReferenceSpec>>loadUsing:gofer:
[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
OrderedCollection>>do:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
BlockClosure>>ensure:
MetacelloLoaderPolicy>>pushLoadDirective:during:
MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
MetacelloMCVersionSpecLoader>>load
MetacelloMCVersion>>executeLoadFromArray:
[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
BlockClosure>>on:do:
MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
BlockClosure>>ensure:
[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
MetacelloMCVersion>>fetchRequiredFromArray:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
BlockClosure>>ensure:
MetacelloMCVersion>>doLoadRequiredFromArray:
MetacelloMCVersion>>load
MetacelloConfigurationBrowserPane>>loadConfigurationWithStable:
MetacelloConfigurationBrowserPane>>installConfiguration
MetacelloConfigurationBrowser>>installConfiguration
MetacelloConfigurationBrowserToolbar>>installConfiguration
[ self installConfiguration ] in MetacelloConfigurationBrowserToolbar>>setInstallModel
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MetacelloProjectSpecLoadError: No version found for '12' of ConfigurationOfNeoCSV because: Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions include: #(#bleedingEdge #stable '1-baseline' '1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11')
28 May 2015 8:10:41.937494 pm

VM: Win32 - IX86 - 6.2 - NBCoInterpreter NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
NBCogit NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
https://github.com/pharo-project/pharo-vm.git Commit: 81b5d19917dcb78f22482a780deec48c53738396 Date: 2014-09-20 14:36:18 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14858

Image: Pharo4.0 [Latest update: #40614]

[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


BlockClosure>>cull:
	Receiver: [ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException...etc...
	Arguments and temporary variables: 
		anArg: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions ...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	230
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versi...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Version '12' is not defined in ConfigurationOfNeoCSV. Possible versi...etc...
	Receiver's instance variables: 
		sender: 	MetacelloMCProjectSpec>>loadVersion:
		pc: 	15
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ vrsn := self version ]


MetacelloVersionDoesNotExistError(Exception)>>signal
	Receiver: Version '12' is not defined in ConfigurationOfNeoCSV. Possible versions include: #(#bleedi...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [Configur...etc...
		signalContext: 	MetacelloVersionDoesNotExistError(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		project: 	ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [Configura...etc...
		versionString: 	'12'


[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->>=1 [ConfigurationOfNeoCSV] '1-baseline'-><>1-bas...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->>=1 [ConfigurationOfNeoCSV] '1-baseline'-><>1-bas...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	'12'
		aBlock: 	[ ^ aBlock value ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->>=1 [ConfigurationOfNeoCSV] '1-baseline'-><>1-bas...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('1'->>=1 [ConfigurationOfNeoCSV] '1-baseline'-><>1-baseline [ConfigurationOfN...etc...
	Arguments and temporary variables: 
		key: 	'12'
		aBlock: 	[ 
(MetacelloVersionDefinitionError project: self project versionString...etc...
	Receiver's instance variables: 
		tally: 	12
		array: 	an Array('9'->>=9 [ConfigurationOfNeoCSV] '6'->>=6 [ConfigurationOfNeoCS...etc...


MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		aBlock: 	[ (MetacelloVersionDoesNotExistError project: self project versionStrin...etc...
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->>=1 [ConfigurationOfNeoCSV] '1-baseline'-><>1-bas...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProject(MetacelloProject)>>version:
	Receiver: ConfigurationOfNeoCSV(1-baseline [ConfigurationOfNeoCSV], 1 [ConfigurationOfNeoCSV], 2 [Co...etc...
	Arguments and temporary variables: 
		aVersionString: 	'12'
		vrsn: 	nil
	Receiver's instance variables: 
		versionMap: 	a Dictionary('1'->>=1 [ConfigurationOfNeoCSV] '1-baseline'-><>1-bas...etc...
		symbolicVersionMap: 	a Dictionary(#bleedingEdge->'1-baseline' #stable->'11' )
		errorMap: 	a Dictionary()
		loader: 	nil
		loaderClass: 	MetacelloLoadingMCSpecLoader
		loadType: 	#linear
		configuration: 	a ConfigurationOfNeoCSV
		projectAttributes: 	nil
		versionNumberClass: 	MetacelloVersionNumber


MetacelloMCProjectSpec>>version
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


BlockClosure>>on:do:
	Receiver: [ vrsn := self version ]
	Arguments and temporary variables: 
		exception: 	MetacelloVersionDoesNotExistError
		handlerAction: 	[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	ve...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloMCProjectSpec>>loadVersion:
		startpc: 	219
		numArgs: 	0


MetacelloMCProjectSpec>>loadVersion:
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 
		aVersionOrNil: 	nil
		mcLoader: 	nil
		list: 	nil
		vrsn: 	nil
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


MetacelloProjectSpecForLoad>>performLoad
	Receiver: a MetacelloProjectSpecForLoad
	Arguments and temporary variables: 
		displayString: 	'Project: NeoCSV 12'
		spec: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString...etc...
	Receiver's instance variables: 
		projectSpec: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versio...etc...
		useDetermineVersionForLoad: 	true
		overrideProjectSpec: 	nil


MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
	Receiver: spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionString: '12';
	reposito...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		mutable: 	nil
		name: 	'NeoCSV'
		className: 	#ConfigurationOfNeoCSV
		versionString: 	'12'
		operator: 	nil
		loads: 	nil
		preLoadDoIt: 	nil
		postLoadDoIt: 	nil
		projectPackage: 	spec 
	name: #ConfigurationOfNeoCSV;
	repository: 'http://small...etc...
		repositories: 	spec
repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPha...etc...
		file: 	nil


MetacelloProjectReferenceSpec>>loadUsing:gofer:
	Receiver: spec 
	name: 'NeoCSV';
	projectReference: [
		spec
			className: #ConfigurationOfNeoCSV;
	...etc...
	Arguments and temporary variables: 
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
		ignored: 	a MetacelloGofer
		required: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	versionSt...etc...
	Receiver's instance variables: 
		project: 	ConfigurationOfA4BP(0.1-baseline [ConfigurationOfA4BP], 0.2-baseline [...etc...
		loader: 	nil
		mutable: 	nil
		name: 	'NeoCSV'
		requires: 	#()
		includes: 	#()
		answers: 	nil
		projectReference: 	spec 
	name: 'NeoCSV';
	className: #ConfigurationOfNeoCSV;
	v...etc...


[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 3...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
		pkg: 	spec 
	name: 'NeoCSV';
	projectReference: [
		spec
			className: #Configur...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [
		spec
			className: #Co...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :pkg | pkg loadUsing: self gofer: gofer ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(spec 
	name: 'Glamour';
	projectReference: [
		spec
			classNam...etc...
		firstIndex: 	1
		lastIndex: 	8


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 3...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
		gofer: 	a MetacelloGofer
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 3...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


BlockClosure>>ensure:
	Receiver: [ super linearLoadPackageSpecs: packageSpecs repositories: repositories ]
	Arguments and temporary variables: 
		aBlock: 	[ loadDirective := oldRoot ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositorie...etc...
		startpc: 	33
		numArgs: 	0


MetacelloLoaderPolicy>>pushLoadDirective:during:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aLoaderDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 3.3....etc...
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		oldRoot: 	linear load : 
	explicit load : 1.1 [ConfigurationOfA4BP]
	linear load...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary('CollectionExtensions-TudorGirba.41'->a MCSmalltalk...etc...
		ensuredMap: 	a Dictionary('Grease'->#present 'Magritte3'->#present 'NeoCSV'->#pr...etc...
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	a Gofer
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 3.3.0 [...etc...
		silently: 	false


MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
	Receiver: a MetacelloLoaderPolicy
	Arguments and temporary variables: 
		aBlock: 	[ super linearLoadPackageSpecs: packageSpecs repositories: repositories...etc...
		aLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP...etc...
	Receiver's instance variables: 
		overrideRepositories: 	nil
		repositoryMap: 	a Dictionary('CollectionExtensions-TudorGirba.41'->a MCSmalltalk...etc...
		ensuredMap: 	a Dictionary('Grease'->#present 'Magritte3'->#present 'NeoCSV'->#pr...etc...
		cacheRepository: 	a MCDictionaryRepository(cache)
		cacheGofer: 	a Gofer
		ignoreImage: 	false
		loadData: 	a MetacelloLoadData
		loadDirective: 	linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 3.3.0 [...etc...
		silently: 	false


MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 3...etc...
	Arguments and temporary variables: 
		packageSpecs: 	an OrderedCollection(spec 
	name: 'Glamour';
	projectReference: [...etc...
		repositories: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkh...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
	Receiver: a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]
	explicit load : 3...etc...
	Arguments and temporary variables: 
		repos: 	an OrderedCollection(a MCSmalltalkhubRepository(http://smalltalkhub.com/...etc...
	Receiver's instance variables: 
		spec: 	a MetacelloMCVersionSpecLoader
		operator: 	nil
		loaderPolicy: 	a MetacelloLoaderPolicy
		disablePackageCache: 	false


MetacelloMCVersionSpecLoader>>load
	Receiver: a MetacelloMCVersionSpecLoader
	Arguments and temporary variables: 
		mcLoader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4B...etc...
	Receiver's instance variables: 
		versionSpec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec au...etc...
		required: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #...etc...
		packages: 	a Dictionary('A4BP-Tests-BpelAnalyzer'->spec 
	name: 'A4BP-Tests-Bpel...etc...
		loader: 	a MetacelloFetchingMCSpecLoader(linear load : 1.1 [ConfigurationOfA4BP]...etc...
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloMCVersion>>executeLoadFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		loader: 	a MetacelloMCVersionSpecLoader
		mcLoader: 	nil
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
		dict: 	a Dictionary(#ancestors->a Dictionary(size 626) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 626) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 626) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


BlockClosure>>on:do:
	Receiver: [ ^ aBlock value: dict ]
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
(ex isKindOf: MetacelloStackCacheNotification)
	ifTrue:...etc...
	Receiver's instance variables: 
		outerContext: 	MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:...etc...
		startpc: 	100
		numArgs: 	0


MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ :dict | ^ self executeLoadFromArray: anArray ]
		defaultDictionary: 	a Dictionary(#ancestors->a Dictionary(size 626) #goferReposi...etc...
		dict: 	a Dictionary(#ancestors->a Dictionary(size 626) #goferRepository->an Iden...etc...
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


BlockClosure>>ensure:
	Receiver: [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self versionSpec loader: originalLoader ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform curre...etc...
		startpc: 	120
		numArgs: 	0


[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy


MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
	Receiver: a MetacelloPharo30Platform
	Arguments and temporary variables: 
		aBlock: 	[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	us...etc...
		aString: 	'Fetching 1.1 of ConfigurationOfA4BP'
	Receiver's instance variables: 
		bypassProgressBars: 	false
		bypassGoferLoadUpdateCategories: 	false


MetacelloMCVersion>>fetchRequiredFromArray:
	Receiver: <>1.1 [ConfigurationOfA4BP]
	Arguments and temporary variables: 
		anArray: 	a Set('JNIPort' 'A4BP-BPEL20-core' 'Glamour' #'A4BP-SimEngine-View' #'...etc...
		originalLoader: 	a MetacelloLoadingMCSpecLoader
		displayString: 	'Fetching 1.1 of ConfigurationOfA4BP'
		newLoader: 	a MetacelloFetchingMCSpecLoader(linear load : )
	Receiver's instance variables: 
		spec: 	spec blessing: #'stable'.
spec description: 'version 1.1'.
spec author: '...etc...
		versionNumber: 	1.1
		importedVersions: 	an OrderedCollection('0.7-baseline')
		versionStatus: 	#somethingLoaded
		loaderPolicy: 	a MetacelloLoaderPolicy



--- The full stack ---
[ :ex | 
^ (MetacelloProjectSpecLoadError projectSpec: self)
	versionDoesNotExistException: ex;
	signal:
			'No version found for ' , self versionString printString , ' of ' , self className asString , ' because: '
					, ex description ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
MetacelloVersionDoesNotExistError(Exception)>>signal
[ (MetacelloVersionDoesNotExistError project: self project versionString: aVersionString) signal ] in MetacelloMCProject(MetacelloProject)>>version:
[ ^ aBlock value ] in [ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
[ 
(MetacelloVersionDefinitionError project: self project versionString: aVersionString)
	exception: (self errorMap at: aVersionString ifAbsent: [ ^ aBlock value ]);
	signal ] in MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
Dictionary>>at:ifAbsent:
MetacelloMCProject(MetacelloProject)>>lookupVersion:ifAbsent:
MetacelloMCProject(MetacelloProject)>>version:
MetacelloMCProjectSpec>>version
[ vrsn := self version ] in MetacelloMCProjectSpec>>loadVersion:
BlockClosure>>on:do:
MetacelloMCProjectSpec>>loadVersion:
MetacelloProjectSpecForLoad>>performLoad
MetacelloMCProjectSpec(MetacelloGenericProjectSpec)>>load
MetacelloProjectReferenceSpec>>loadUsing:gofer:
[ :pkg | pkg loadUsing: self gofer: gofer ] in MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
OrderedCollection>>do:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>linearLoadPackageSpecs:repositories:
[ super linearLoadPackageSpecs: packageSpecs repositories: repositories ] in MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
BlockClosure>>ensure:
MetacelloLoaderPolicy>>pushLoadDirective:during:
MetacelloLoaderPolicy>>pushLinearLoadDirectivesDuring:for:
MetacelloFetchingMCSpecLoader>>linearLoadPackageSpecs:repositories:
MetacelloFetchingMCSpecLoader(MetacelloCommonMCSpecLoader)>>load
MetacelloMCVersionSpecLoader>>load
MetacelloMCVersion>>executeLoadFromArray:
[ :dict | ^ self executeLoadFromArray: anArray ] in [ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
[ ^ aBlock value: dict ] in MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
BlockClosure>>on:do:
MetacelloPharo30Platform(MetacelloPlatform)>>useStackCacheDuring:defaultDictionary:
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ] in [ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
BlockClosure>>ensure:
[ 
[ 
self versionSpec loader: newLoader.
MetacelloPlatform current
	useStackCacheDuring: [ :dict | ^ self executeLoadFromArray: anArray ]
	defaultDictionary: Dictionary new ]
	ensure: [ self versionSpec loader: originalLoader ] ] in MetacelloMCVersion>>fetchRequiredFromArray:
MetacelloPharo30Platform(MetacelloPlatform)>>do:displaying:
MetacelloMCVersion>>fetchRequiredFromArray:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
| fetchLoader |
fetchLoader := self fetchRequiredFromArray: (self defaultPackageNamesToLoad: anArray).
MetacelloPlatform current do: [ fetchLoader doLoad ] displaying: 'Loading ' , displayString.
Transcript
	cr;
	show: '...finished ' , self versionNumber printString.
^ fetchLoader ] in MetacelloMCVersion>>doLoadRequiredFromArray:
BlockClosure>>ensure:
MetacelloMCVersion>>doLoadRequiredFromArray:
MetacelloMCVersion>>load
MetacelloConfigurationBrowserPane>>loadConfigurationWithStable:
MetacelloConfigurationBrowserPane>>installConfiguration
MetacelloConfigurationBrowser>>installConfiguration
MetacelloConfigurationBrowserToolbar>>installConfiguration
[ self installConfiguration ] in MetacelloConfigurationBrowserToolbar>>setInstallModel
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

